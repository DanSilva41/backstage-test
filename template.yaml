apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: spec-quarkus-rest-relational
  title: Quarkus REST Relational Service
  description: Criação de microsserviço usando Quarkus, REST API e PostgreSQL
  tags:
    - microservice
    - java
    - quarkus
    - rest
    - relational
    - postgresql
spec: 
  owner: thesolutiontech/devops

  # these are the steps which are rendered in the frontend with the form input
  parameters:
    - title: Configurações do projeto
      required:
        - name
        - title
        - description
        - owner
      properties:
        name:
          title: Nome
          description: Nome do seu projeto. (use apenas letras, números, pontos e hífens)
          type: string
          ui:field: EntityNamePicker
          ui:autofocus: true
        title:
          title: Título
          description: Nome amigável do seu projeto, que será exibido no README e no catálogo de componentes
          type: string
        description:
          title: Descrição
          description: Breve descrição do objetivo do seu projeto.
          type: string
          ui:options:
            rows: 5
        owner:
          title: Proprietário(a)
          description: Equipe responsável pelo projeto.
          type: string
          ui:field: OwnerPicker
          ui:options:
            allowedKinds: [Group]

    - title: Configurações do repositório
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Local do repositório
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com

  # here's the steps that are executed in series in the scaffolder backend
  steps:
    - id: fetch-base
      name: Buscar e aplicar template
      action: fetch:template
      input:
        url: ./skeleton
        values:
          name: ${{ parameters.name }}
          title: ${{ parameters.title }}
          description: ${{ parameters.description }}
          owner: ${{ parameters.owner }}
          destination: ${{ parseRepoUrl parameters.repoUrl }}
    
    - id: fetch-docs
      name: Fetch Sample Docs
      action: fetch:plain
      input:
        targetPath: ./community
        url: https://github.com/backstage/community/tree/main/backstage-community-sessions

    - id: publish
      name: Publicar no GitHub
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}
    
    - id: register
      name: Registrar no catálogo
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'
        
